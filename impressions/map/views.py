from django.shortcuts import render
from django.views.generic import ListView, DetailView
from .models import Layer, Site
import json
from django.core import serializers
#from core.views import SiteListMixin

class SiteListMixin(object):
    """
    Retrieve the site locations.
    """

    # Get params
    def get_context_data(self, **kwargs):
         # Call the base implementation first to get a context
        context = super(SiteListMixin, self).get_context_data(**kwargs)
        # get short_name from URLconf
        # short_name = self.kwargs['short_name']

        # first just get list of all sites
        site_list = Site.objects.all()
        # later get list just for given layer
        # site_list = Site.objects.filter(map_type='Voyage', 
        #   status_num__gte=settings.STATUS_LEVEL, 
        #   sites__id__exact=settings.SITE_ID).order_by('ordinal')
        # figure how to get parameter for chosen layer

        # get object 
        # List for interface outside of map
        # Interface may need to use code generated by JS, in which case 
        # we won't need to put this into the context
        context['site_list'] = site_list

        # we need to add properties (evidence object, etc) to the results
        # use values() to create dictionary so we can iterate
        site_values = Site.objects.values()
        # values() creates a list of dictionaries - same as json
        # don't need to convert
        # sites_json_dict = json.dumps(site_values)
        # for loop version easier to read, works, but comprehension might be faster
        for idx, row in enumerate(site_values):
            row['site_info'] = site_list[idx].site_info
            #row.update( { "test": "test" } )

        # comprehension version
        # first, creat the function that will generate the new value
        # Looks like we can't use assignment inside comprehension. Tabling this
        #site_values_plus = [row['site_info'] = site_list[1].site_info for row in site_values]

        context['site_values'] = site_values

        # obsolete
        # create JSON for sites
        #sites_json = serializers.serialize("json", site_list)
        #context['sites_json'] = sites_json

        return context


class MapListView(SiteListMixin, ListView):
    model = Layer
    # context_object_name = 'object_list'
    template_name = 'map/map.html' 
